// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Usuario {
  id                Int    @id @default(autoincrement())
  nombre            String 
  correo            String @unique
  contrasena        String
  oficina           Oficina @relation(fields: [oficinaId], references: [id])
  oficinaId         Int
  area              Area @relation(fields: [areaId], references: [id])
  areaId            Int
  rol               Role @relation(fields: [rolId], references: [id])
  rolId             Int
  activo            Boolean @default(value: true)
  lastModifiedBy    String?
  pregunta          Ticket[] @relation(name: "UsuarioPregunta")
  responder         Ticket[] @relation(name: "UsuarioRespuesta")
  proyectos         Proyecto[]
  comentarios       Comentario[]
  aceptaciones      Aceptacion[]
  createdAt         DateTime?
  updatedAt         DateTime? @updatedAt
}

model Role {
  id           Int    @id @default(autoincrement())
  usuarios    Usuario[]
  nombre       String 
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}

model Oficina {
  id           Int    @id @default(autoincrement())
  nombre       String 
  direccion    String
  usuarios     Usuario[]
  areas        Area[]
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}

model Proyecto {
  id            Int    @id @default(autoincrement())
  usuario       Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  nombre        String
  descripcion   String
  estado        String
  cuestionarios Cuestionario[]
  respuestas    Respuesta[]
  createdAt     DateTime
  updatedAt     DateTime @updatedAt
}

model Cuestionario {
  id                Int    @id @default(autoincrement())
  proyecto          Proyecto @relation(fields: [proyectoId], references: [id])
  proyectoId        Int
  pregunta          String
  preguntaAnidada   String
  createdAt         DateTime
  updatedAt         DateTime @updatedAt
}

model Respuesta {
  id           Int    @id @default(autoincrement())
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
  proyectoId   Int
  respuesta    String
  fecha        DateTime
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}

model Ticket {
  id                  Int    @id @default(autoincrement())
  usuarioPregunta     Usuario @relation(name: "UsuarioPregunta",fields: [usuarioPreguntaId], references: [id])
  usuarioPreguntaId   Int
  usuarioRespuesta    Usuario? @relation(name: "UsuarioRespuesta",fields: [usuarioRespuestaId], references: [id])
  usuarioRespuestaId  Int?
  titulo              String
  descripcion         String
  estado              String
  comentarios         Comentario[]
  createdAt           DateTime
  updatedAt           DateTime @updatedAt
}

model Area {
  id           Int    @id @default(autoincrement())
  usuarios    Usuario[]
  nombre       String 
  oficina     Oficina @relation(fields: [oficinaId], references: [id])
  oficinaId   Int
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}

model Comentario {
  id           Int    @id @default(autoincrement())
  usuario      Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  ticket       Ticket @relation(fields: [ticketId], references: [id])
  ticketId     Int
  comentario   String
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}

model Aceptacion {
  id           Int    @id @default(autoincrement())
  usuario      Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  file         String
  ticketId     Int
  createdAt    DateTime
  updatedAt    DateTime @updatedAt
}